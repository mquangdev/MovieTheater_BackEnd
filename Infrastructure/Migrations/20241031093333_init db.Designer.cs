// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MovieTheaterContext))]
    [Migration("20241031093333_init db")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("65541c65-31f0-4201-9000-3dffc82988da"),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7001),
                            Password = "admin123",
                            RegisterDate = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(6990),
                            RoleId = new Guid("b0aff688-55b7-406f-97cd-c00c35b1bf95"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7005),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("29d3cceb-992e-4ed2-b4d3-44bea80a26ac"),
                            Email = "employee@example.com",
                            FullName = "Employee User",
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7023),
                            Password = "employee123",
                            RegisterDate = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7023),
                            RoleId = new Guid("4d5f4397-994b-499d-8c53-26cb09bbe652"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7024),
                            Username = "employee"
                        },
                        new
                        {
                            Id = new Guid("bde7c978-94f0-44dc-ae36-9e0a0b52e593"),
                            Email = "member@example.com",
                            FullName = "Member User",
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7030),
                            Password = "member123",
                            RegisterDate = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7029),
                            RoleId = new Guid("71b0500c-0b40-455b-ba72-63d1b06e468b"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7031),
                            Username = "member"
                        });
                });

            modelBuilder.Entity("Core.Entities.CinemaRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentMovieId");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CinemaRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7156),
                            Name = "Room 1",
                            SeatQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7157)
                        },
                        new
                        {
                            Id = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7160),
                            Name = "Room 2",
                            SeatQuantity = 25,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7161)
                        });
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b374d263-13ee-43a9-8005-b029d087a985"),
                            AccountId = new Guid("29d3cceb-992e-4ed2-b4d3-44bea80a26ac"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7070),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7071)
                        });
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MovieName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("ScheduleShow")
                        .HasColumnType("date");

                    b.Property<string>("ScheduleShowTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seat")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UseScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7d22671-7074-4f4a-b37b-7d295f7b332e"),
                            AccountId = new Guid("bde7c978-94f0-44dc-ae36-9e0a0b52e593"),
                            AddScore = 10,
                            BookingDate = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9115),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9149),
                            MovieName = "Action Movie",
                            ScheduleShow = new DateOnly(2024, 11, 1),
                            ScheduleShowTime = "18:00",
                            Seat = "1A, 1B",
                            Status = 1,
                            TotalMoney = 150.00m,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9150),
                            UseScore = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce3b0557-af99-4f9c-aa4e-2b1705d45eaa"),
                            AccountId = new Guid("bde7c978-94f0-44dc-ae36-9e0a0b52e593"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7108),
                            Score = 100,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7109)
                        });
                });

            modelBuilder.Entity("Core.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LargeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieNameEnglish")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MovieNameVN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MovieProductionCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SmallImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7bd8ac85-c907-44aa-a961-89bd9a487a2b"),
                            Actor = "Actor 1",
                            Content = "Action packed movie.",
                            Director = "Director 1",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            FromDate = new DateTime(2024, 9, 30, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7208),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7224),
                            LargeImage = "path/to/large/image1.jpg",
                            MovieNameEnglish = "Action Movie",
                            MovieNameVN = "Phim Hành Động",
                            SmallImage = "path/to/small/image1.jpg",
                            ToDate = new DateTime(2024, 12, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7221),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7225)
                        },
                        new
                        {
                            Id = new Guid("fd0d681e-708d-4835-9d3c-deb2c8036534"),
                            Actor = "Actor 2",
                            Content = "Romantic movie.",
                            Director = "Director 2",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            FromDate = new DateTime(2024, 9, 30, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7229),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7232),
                            LargeImage = "path/to/large/image2.jpg",
                            MovieNameEnglish = "Romantic Movie",
                            MovieNameVN = "Phim Tình Cảm",
                            SmallImage = "path/to/small/image2.jpg",
                            ToDate = new DateTime(2024, 11, 30, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7230),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7233)
                        });
                });

            modelBuilder.Entity("Core.Entities.MovieSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MovieSchedule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35de3447-8412-42e8-bb2a-e13664fda24d"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8953),
                            MovieId = new Guid("7bd8ac85-c907-44aa-a961-89bd9a487a2b"),
                            ScheduleId = new Guid("637e6b26-08e4-49bb-94a9-e41ddae1c096"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8954)
                        });
                });

            modelBuilder.Entity("Core.Entities.MovieShowDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("ShowDateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MovieShowDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e10e7171-7c19-4b70-b6ad-5347674c7618"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9039),
                            MovieId = new Guid("7bd8ac85-c907-44aa-a961-89bd9a487a2b"),
                            ShowDateId = new Guid("27274d94-45e4-4918-bbf1-e718a6705f19"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9040)
                        });
                });

            modelBuilder.Entity("Core.Entities.MovieType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MovieTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a35d5be-4b0c-4341-92e7-d6e118a9ee43"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9265),
                            MovieId = new Guid("7bd8ac85-c907-44aa-a961-89bd9a487a2b"),
                            TypeId = new Guid("e4cb01f9-6a1a-4f7d-9a09-83bfaf04f054"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9266)
                        },
                        new
                        {
                            Id = new Guid("3d7e3ded-5534-4b8a-a3a8-33c0a7ec16f4"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9269),
                            MovieId = new Guid("fd0d681e-708d-4835-9d3c-deb2c8036534"),
                            TypeId = new Guid("ef4ef832-43e2-4a0a-8b0a-13746f79b46b"),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9270)
                        });
                });

            modelBuilder.Entity("Core.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("DiscountLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("95325ae9-a8eb-4139-a5f2-f8e5aa9b8926"),
                            Detail = "Get 20% off for all tickets.",
                            DiscountLevel = 20.0,
                            EndTime = new DateTime(2024, 11, 30, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9080),
                            Image = "path/to/promotion/image.jpg",
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9081),
                            StartTime = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9079),
                            Title = "New Year Discount",
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9082)
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b0aff688-55b7-406f-97cd-c00c35b1bf95"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4d5f4397-994b-499d-8c53-26cb09bbe652"),
                            RoleName = "Employee"
                        },
                        new
                        {
                            Id = new Guid("71b0500c-0b40-455b-ba72-63d1b06e468b"),
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("ScheduleTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("637e6b26-08e4-49bb-94a9-e41ddae1c096"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8773),
                            ScheduleTime = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8774)
                        },
                        new
                        {
                            Id = new Guid("7bc8fb25-ea41-430d-b1b8-e9a572b814b2"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8782),
                            ScheduleTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8783)
                        },
                        new
                        {
                            Id = new Guid("d04d0e1d-74c3-47cb-9007-dd0ec5e23f39"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8786),
                            ScheduleTime = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8787)
                        },
                        new
                        {
                            Id = new Guid("fd58b513-535d-4e7f-9d2e-be327af614b2"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8794),
                            ScheduleTime = new TimeSpan(0, 11, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8795)
                        },
                        new
                        {
                            Id = new Guid("b60122ec-0de2-44d7-afed-381a0c2e2926"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8798),
                            ScheduleTime = new TimeSpan(0, 12, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8799)
                        },
                        new
                        {
                            Id = new Guid("f613ba7e-efd0-46e5-a06e-228ac16b1e19"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8804),
                            ScheduleTime = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8805)
                        },
                        new
                        {
                            Id = new Guid("c61f8f88-a3c2-4e70-9dd2-2d3e70404340"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8809),
                            ScheduleTime = new TimeSpan(0, 14, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8810)
                        },
                        new
                        {
                            Id = new Guid("37627142-c155-4b7c-b26c-f6a77ef51aa4"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8813),
                            ScheduleTime = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8814)
                        },
                        new
                        {
                            Id = new Guid("485ead18-dd73-4254-a2c7-3d3233059778"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8818),
                            ScheduleTime = new TimeSpan(0, 16, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8819)
                        },
                        new
                        {
                            Id = new Guid("4c3d0d9d-2e27-4646-9007-be4d0ed61b42"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8866),
                            ScheduleTime = new TimeSpan(0, 17, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8867)
                        },
                        new
                        {
                            Id = new Guid("06a65541-b7f6-4e49-99eb-4a58ec4eb26f"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8870),
                            ScheduleTime = new TimeSpan(0, 18, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8871)
                        },
                        new
                        {
                            Id = new Guid("6af452a3-65a7-42d4-87b9-0019ed5d5b85"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8878),
                            ScheduleTime = new TimeSpan(0, 19, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8879)
                        },
                        new
                        {
                            Id = new Guid("e30fd83b-bc55-4ab0-90f4-4099853248af"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8883),
                            ScheduleTime = new TimeSpan(0, 20, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8883)
                        },
                        new
                        {
                            Id = new Guid("bc2445ae-fbee-43c5-bbd1-113d671816bf"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8887),
                            ScheduleTime = new TimeSpan(0, 21, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8888)
                        },
                        new
                        {
                            Id = new Guid("d747db86-f107-4ab4-bdb2-e48e9091d978"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8891),
                            ScheduleTime = new TimeSpan(0, 22, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8892)
                        },
                        new
                        {
                            Id = new Guid("88256255-83f4-4f04-9dee-5ec026664299"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8896),
                            ScheduleTime = new TimeSpan(0, 23, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8897)
                        });
                });

            modelBuilder.Entity("Core.Entities.ScheduleSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeatColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.Property<int>("SeatStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemaRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeatColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.Property<int>("SeatStatus")
                        .HasColumnType("int");

                    b.Property<int>("SeatType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CinemaRoomId");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("327de444-0a3e-4992-9c26-2508548cc623"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7387),
                            SeatColumn = "A",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7388)
                        },
                        new
                        {
                            Id = new Guid("82ae1f4d-7419-480e-87c1-b2985947171e"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7424),
                            SeatColumn = "B",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7425)
                        },
                        new
                        {
                            Id = new Guid("af92b48a-3463-4d5d-9d6f-ccf98f22ff58"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7453),
                            SeatColumn = "C",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7453)
                        },
                        new
                        {
                            Id = new Guid("702e5da1-974d-40e3-b1c8-e60a792d6bf0"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7480),
                            SeatColumn = "D",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7481)
                        },
                        new
                        {
                            Id = new Guid("94abe95c-f19c-4fd8-ae5c-cccf73bc4677"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7506),
                            SeatColumn = "E",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7507)
                        },
                        new
                        {
                            Id = new Guid("03c9e985-acbe-499f-9f0c-c924eed5717d"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7535),
                            SeatColumn = "A",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7536)
                        },
                        new
                        {
                            Id = new Guid("82620787-a096-4d25-b2cb-795cbea5a920"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7562),
                            SeatColumn = "B",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7563)
                        },
                        new
                        {
                            Id = new Guid("f200350f-d129-472d-80f3-c2444624688d"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7588),
                            SeatColumn = "C",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7589)
                        },
                        new
                        {
                            Id = new Guid("f98df641-e4b5-46a5-a2d5-3586a87340de"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7617),
                            SeatColumn = "D",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7618)
                        },
                        new
                        {
                            Id = new Guid("77724c08-c712-4648-bd33-4f76b008e60c"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7645),
                            SeatColumn = "E",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7645)
                        },
                        new
                        {
                            Id = new Guid("b67ee80e-5063-494c-9371-b6a2720000f7"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7671),
                            SeatColumn = "A",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7672)
                        },
                        new
                        {
                            Id = new Guid("19e594c8-a329-4fb4-9c92-ffbb9250df82"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7697),
                            SeatColumn = "B",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7698)
                        },
                        new
                        {
                            Id = new Guid("33d514b8-e68c-4f45-9e8f-b63efebff93c"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7724),
                            SeatColumn = "C",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7725)
                        },
                        new
                        {
                            Id = new Guid("7113e37f-1099-4705-876d-038d223bd966"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7750),
                            SeatColumn = "D",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7751)
                        },
                        new
                        {
                            Id = new Guid("563b0278-4ce8-4ce1-b397-f48bec6ea1c1"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7776),
                            SeatColumn = "E",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7776)
                        },
                        new
                        {
                            Id = new Guid("a8daeebc-3144-4be1-bb75-89cfb1ab82b4"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7802),
                            SeatColumn = "A",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7803)
                        },
                        new
                        {
                            Id = new Guid("8a08171a-666f-4fcf-b9e8-3351d41a240f"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7833),
                            SeatColumn = "B",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7833)
                        },
                        new
                        {
                            Id = new Guid("87fefe30-8938-43f2-b6ce-ff085dd8b258"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7919),
                            SeatColumn = "C",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7920)
                        },
                        new
                        {
                            Id = new Guid("73e3cc7c-8a2d-4317-8316-bc51be6bd5f2"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7947),
                            SeatColumn = "D",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7948)
                        },
                        new
                        {
                            Id = new Guid("fc1b2972-7fb3-4867-9116-be0af4801652"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7973),
                            SeatColumn = "E",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(7974)
                        },
                        new
                        {
                            Id = new Guid("1cd8a793-184c-4a29-9c1f-5121f0334f9f"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8000),
                            SeatColumn = "A",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8001)
                        },
                        new
                        {
                            Id = new Guid("21c033e1-07e0-4724-a379-3afbb22a7f6b"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8026),
                            SeatColumn = "B",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8027)
                        },
                        new
                        {
                            Id = new Guid("c750463b-262b-4196-95b6-fb8bc8e0ad72"),
                            CinemaRoomId = new Guid("7bf4854d-82cc-4348-a585-2fb0dfa998d8"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8052),
                            SeatColumn = "C",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8053)
                        },
                        new
                        {
                            Id = new Guid("4ac3d10a-28ae-4ce8-9108-7c2934888063"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8080),
                            SeatColumn = "A",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8081)
                        },
                        new
                        {
                            Id = new Guid("582d9ba8-38b0-443b-826a-1d2b69cbd5b4"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8110),
                            SeatColumn = "B",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8111)
                        },
                        new
                        {
                            Id = new Guid("cd05cd6a-9c41-452f-ad01-402c35af7cda"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8137),
                            SeatColumn = "C",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8138)
                        },
                        new
                        {
                            Id = new Guid("0c8b3a75-045d-4501-ba7c-241d7e2c8811"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8162),
                            SeatColumn = "D",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8163)
                        },
                        new
                        {
                            Id = new Guid("c90a9c36-b622-45d6-bbe0-856dc149f158"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8188),
                            SeatColumn = "E",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8189)
                        },
                        new
                        {
                            Id = new Guid("0196a0bc-6eaa-49e4-a6d2-edbcdc1aa9e2"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8214),
                            SeatColumn = "A",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8215)
                        },
                        new
                        {
                            Id = new Guid("e526ae67-2050-4557-ab59-9b67c5500d15"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8241),
                            SeatColumn = "B",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8242)
                        },
                        new
                        {
                            Id = new Guid("1a29db88-591e-441e-a1b7-d9dc96eb4487"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8267),
                            SeatColumn = "C",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8268)
                        },
                        new
                        {
                            Id = new Guid("77827c49-8b5f-4b26-b842-9d316b534800"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8293),
                            SeatColumn = "D",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8294)
                        },
                        new
                        {
                            Id = new Guid("a4c8d816-f5f2-491f-9bca-047b4cf7f9ff"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8322),
                            SeatColumn = "E",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8323)
                        },
                        new
                        {
                            Id = new Guid("99237463-861e-4b03-8f03-30dfb9606d6b"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8390),
                            SeatColumn = "A",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8391)
                        },
                        new
                        {
                            Id = new Guid("b4041371-0f5f-408b-b9ac-153134f1af6e"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8417),
                            SeatColumn = "B",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8418)
                        },
                        new
                        {
                            Id = new Guid("6bed961a-ed2d-4ccf-ac20-4e63cae87ea2"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8443),
                            SeatColumn = "C",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8444)
                        },
                        new
                        {
                            Id = new Guid("c32ae876-8545-47c9-b33c-6b08738404c0"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8470),
                            SeatColumn = "D",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8471)
                        },
                        new
                        {
                            Id = new Guid("50e8dea3-2d35-436b-b9fe-7098fd612dc9"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8496),
                            SeatColumn = "E",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8497)
                        },
                        new
                        {
                            Id = new Guid("cd8bdf7e-c497-4410-a604-5c80015eb78e"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8580),
                            SeatColumn = "A",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8581)
                        },
                        new
                        {
                            Id = new Guid("5a334638-113e-40a3-a7b7-7ebac1b612f3"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8607),
                            SeatColumn = "B",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8608)
                        },
                        new
                        {
                            Id = new Guid("5789bdbc-fc82-405c-a830-8dd674ff4f7a"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8637),
                            SeatColumn = "C",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8638)
                        },
                        new
                        {
                            Id = new Guid("b28fca6d-0872-48d7-b06d-443263e90b7a"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8663),
                            SeatColumn = "D",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8664)
                        },
                        new
                        {
                            Id = new Guid("4b2fa748-106d-4347-9fbc-85126c94b179"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8689),
                            SeatColumn = "E",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8690)
                        },
                        new
                        {
                            Id = new Guid("65148b12-9568-4ccc-8231-7a4cee51b75d"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8715),
                            SeatColumn = "A",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8716)
                        },
                        new
                        {
                            Id = new Guid("c56ea5ba-7025-4ea0-99e0-27316cc46e37"),
                            CinemaRoomId = new Guid("ad68ca82-150c-4e7b-a726-d3ffe68a5088"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8742),
                            SeatColumn = "B",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8743)
                        });
                });

            modelBuilder.Entity("Core.Entities.ShowDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateShow")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ShowDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("27274d94-45e4-4918-bbf1-e718a6705f19"),
                            DateName = "Tomorrow",
                            DateShow = new DateTime(2024, 11, 1, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8992),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8997),
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(8998)
                        });
                });

            modelBuilder.Entity("Core.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3c86b92-0b9e-4e65-8bbb-7358c4b503d7"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9186),
                            InvoiceId = new Guid("f7d22671-7074-4f4a-b37b-7d295f7b332e"),
                            Price = 75.00m,
                            TicketType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9187)
                        });
                });

            modelBuilder.Entity("Core.Entities.TypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e4cb01f9-6a1a-4f7d-9a09-83bfaf04f054"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9224),
                            Name = "Action",
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9225)
                        },
                        new
                        {
                            Id = new Guid("ef4ef832-43e2-4a0a-8b0a-13746f79b46b"),
                            InsertedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9227),
                            Name = "Romantic",
                            UpdatedAt = new DateTime(2024, 10, 31, 16, 33, 32, 684, DateTimeKind.Local).AddTicks(9228)
                        });
                });

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.CinemaRoom", b =>
                {
                    b.HasOne("Core.Entities.Movie", "CurrentMovie")
                        .WithMany("CinemaRooms")
                        .HasForeignKey("CurrentMovieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CurrentMovie");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Core.Entities.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Account");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Account");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Member", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Core.Entities.Member", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Account");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Movie", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.MovieSchedule", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Schedule", "Schedule")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.MovieShowDate", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("MovieShowDates")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ShowDate", "ShowDate")
                        .WithMany("MovieShowDates")
                        .HasForeignKey("ShowDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("ShowDate");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.MovieType", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("MovieTypes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TypeEntity", "TypeEntity")
                        .WithMany("MovieTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("TypeEntity");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Promotion", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Schedule", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.ScheduleSeat", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Seat", "Seat")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");

                    b.Navigation("Seat");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Seat", b =>
                {
                    b.HasOne("Core.Entities.CinemaRoom", "CinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("CinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CinemaRoom");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.ShowDate", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Invoice", "Invoice")
                        .WithMany("Tickets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Invoice");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.TypeEntity", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Core.Entities.CinemaRoom", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Entities.Movie", b =>
                {
                    b.Navigation("CinemaRooms");

                    b.Navigation("MovieSchedules");

                    b.Navigation("MovieShowDates");

                    b.Navigation("MovieTypes");

                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Core.Entities.Schedule", b =>
                {
                    b.Navigation("MovieSchedules");

                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.Seat", b =>
                {
                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.ShowDate", b =>
                {
                    b.Navigation("MovieShowDates");
                });

            modelBuilder.Entity("Core.Entities.TypeEntity", b =>
                {
                    b.Navigation("MovieTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
