// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(MovieTheaterContext))]
    partial class MovieTheaterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCard")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("RoleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("feb565ad-dfa4-4e38-af1e-3b507db543e7"),
                            Email = "admin@example.com",
                            FullName = "Admin User",
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2119),
                            Password = "admin123",
                            RegisterDate = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2105),
                            RoleId = new Guid("35317719-3b20-49ca-b754-91ff85562eaa"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2122),
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("50623fc4-df8e-43dc-8284-a7c54d2cb7a4"),
                            Email = "employee@example.com",
                            FullName = "Employee User",
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2140),
                            Password = "employee123",
                            RegisterDate = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2139),
                            RoleId = new Guid("72611c8e-2e66-4487-959b-5dc518c63bf0"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2140),
                            Username = "employee"
                        },
                        new
                        {
                            Id = new Guid("522b95f8-a95b-456f-9a08-28011718a47b"),
                            Email = "member@example.com",
                            FullName = "Member User",
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2143),
                            Password = "member123",
                            RegisterDate = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2143),
                            RoleId = new Guid("dded4e77-fd32-4d63-aede-4161441f583a"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2144),
                            Username = "member"
                        });
                });

            modelBuilder.Entity("Core.Entities.CinemaRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CurrentMovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("SeatQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentMovieId");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("CinemaRooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2226),
                            Name = "Room 1",
                            SeatQuantity = 30,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2226)
                        },
                        new
                        {
                            Id = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2308),
                            Name = "Room 2",
                            SeatQuantity = 25,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2309)
                        });
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c2e5979-7e49-4244-943a-143ffc5f21a6"),
                            AccountId = new Guid("50623fc4-df8e-43dc-8284-a7c54d2cb7a4"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2170),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2171)
                        });
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AddScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MovieName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly>("ScheduleShow")
                        .HasColumnType("date");

                    b.Property<string>("ScheduleShowTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Seat")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("UseScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7ddbf4aa-a6fd-44f6-8337-86444f2f7005"),
                            AccountId = new Guid("522b95f8-a95b-456f-9a08-28011718a47b"),
                            AddScore = 10,
                            BookingDate = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3451),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3482),
                            MovieName = "Action Movie",
                            ScheduleShow = new DateOnly(2024, 11, 1),
                            ScheduleShowTime = "18:00",
                            Seat = "1A, 1B",
                            Status = 1,
                            TotalMoney = 150.00m,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3483),
                            UseScore = 0
                        });
                });

            modelBuilder.Entity("Core.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Members");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bb6755ed-043f-4e71-9e15-e044cda04884"),
                            AccountId = new Guid("522b95f8-a95b-456f-9a08-28011718a47b"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2196),
                            Score = 100,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2197)
                        });
                });

            modelBuilder.Entity("Core.Entities.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Actor")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Director")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LargeImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MovieNameEnglish")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MovieNameVN")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MovieProductionCompany")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SmallImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("baa8ac4c-51f3-4fad-bbab-3209c5e484a3"),
                            Actor = "Actor 1",
                            Content = "Action packed movie.",
                            Director = "Director 1",
                            Duration = new TimeSpan(0, 2, 0, 0, 0),
                            FromDate = new DateTime(2024, 9, 30, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2344),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2356),
                            LargeImage = "path/to/large/image1.jpg",
                            MovieNameEnglish = "Action Movie",
                            MovieNameVN = "Phim Hành Động",
                            SmallImage = "path/to/small/image1.jpg",
                            ToDate = new DateTime(2024, 12, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2354),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2357)
                        },
                        new
                        {
                            Id = new Guid("54274e99-c5ae-4700-9cb8-d1d688d7d114"),
                            Actor = "Actor 2",
                            Content = "Romantic movie.",
                            Director = "Director 2",
                            Duration = new TimeSpan(0, 1, 30, 0, 0),
                            FromDate = new DateTime(2024, 9, 30, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2359),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2361),
                            LargeImage = "path/to/large/image2.jpg",
                            MovieNameEnglish = "Romantic Movie",
                            MovieNameVN = "Phim Tình Cảm",
                            SmallImage = "path/to/small/image2.jpg",
                            ToDate = new DateTime(2024, 11, 30, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2360),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2362)
                        });
                });

            modelBuilder.Entity("Core.Entities.MovieSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MovieSchedule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3ae60cee-dfe0-4d80-9d02-13253e53ded5"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3355),
                            MovieId = new Guid("baa8ac4c-51f3-4fad-bbab-3209c5e484a3"),
                            ScheduleId = new Guid("de1d7c9e-8928-4356-9450-0ba0428e65b2"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3356)
                        });
                });

            modelBuilder.Entity("Core.Entities.MovieShowDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShowDateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("ShowDateId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MovieShowDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b50075af-7796-4004-b739-ba455289ba15"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3406),
                            MovieId = new Guid("baa8ac4c-51f3-4fad-bbab-3209c5e484a3"),
                            ShowDateId = new Guid("77c656f7-b7a2-4396-ab51-c44ce35805a0"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3406)
                        });
                });

            modelBuilder.Entity("Core.Entities.MovieType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("MovieTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8ec8d2c-09e4-4a78-87aa-7ee61c1a30b3"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3549),
                            MovieId = new Guid("baa8ac4c-51f3-4fad-bbab-3209c5e484a3"),
                            TypeId = new Guid("4a404919-1423-452e-aeb0-4f5753fb8ca6"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3550)
                        },
                        new
                        {
                            Id = new Guid("5bec3fa5-6ab9-413e-8292-0cccf9fc36a8"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3552),
                            MovieId = new Guid("54274e99-c5ae-4700-9cb8-d1d688d7d114"),
                            TypeId = new Guid("f2ab13ac-c1d9-4b96-9446-0f13cdcc68a0"),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3552)
                        });
                });

            modelBuilder.Entity("Core.Entities.Promotion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Detail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("DiscountLevel")
                        .HasColumnType("float");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3e6d83f4-6d83-48af-80b6-08a36425a5d5"),
                            Detail = "Get 20% off for all tickets.",
                            DiscountLevel = 20.0,
                            EndTime = new DateTime(2024, 11, 30, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3428),
                            Image = "path/to/promotion/image.jpg",
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3429),
                            StartTime = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3428),
                            Title = "New Year Discount",
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3430)
                        });
                });

            modelBuilder.Entity("Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("35317719-3b20-49ca-b754-91ff85562eaa"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("72611c8e-2e66-4487-959b-5dc518c63bf0"),
                            RoleName = "Employee"
                        },
                        new
                        {
                            Id = new Guid("dded4e77-fd32-4d63-aede-4161441f583a"),
                            RoleName = "Member"
                        });
                });

            modelBuilder.Entity("Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("ScheduleTime")
                        .HasColumnType("time");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("de1d7c9e-8928-4356-9450-0ba0428e65b2"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3241),
                            ScheduleTime = new TimeSpan(0, 8, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3242)
                        },
                        new
                        {
                            Id = new Guid("b24ff4f1-bcc5-4978-a2ed-6911113ebe42"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3245),
                            ScheduleTime = new TimeSpan(0, 9, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3246)
                        },
                        new
                        {
                            Id = new Guid("22780aaf-6f0e-4f2a-acc9-cff6ac0be736"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3248),
                            ScheduleTime = new TimeSpan(0, 10, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3249)
                        },
                        new
                        {
                            Id = new Guid("f5154370-2cf4-4cf1-9b8c-64320f3834ea"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3253),
                            ScheduleTime = new TimeSpan(0, 11, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3253)
                        },
                        new
                        {
                            Id = new Guid("64037c49-bcbd-462c-b7ea-5383527c5d08"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3286),
                            ScheduleTime = new TimeSpan(0, 12, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3286)
                        },
                        new
                        {
                            Id = new Guid("7f1b0ed6-4251-4763-9d7c-d52c5e631665"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3290),
                            ScheduleTime = new TimeSpan(0, 13, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3290)
                        },
                        new
                        {
                            Id = new Guid("f7baaff3-e4a0-4619-80e5-59f79adc9434"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3292),
                            ScheduleTime = new TimeSpan(0, 14, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3293)
                        },
                        new
                        {
                            Id = new Guid("47146887-5a4e-4d9d-bc93-72791a02a084"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3295),
                            ScheduleTime = new TimeSpan(0, 15, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3296)
                        },
                        new
                        {
                            Id = new Guid("46a028c0-5c36-4ff5-8f97-50c979d653d2"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3298),
                            ScheduleTime = new TimeSpan(0, 16, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3298)
                        },
                        new
                        {
                            Id = new Guid("e688747a-2636-4d44-a620-3945d9716c6d"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3301),
                            ScheduleTime = new TimeSpan(0, 17, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3302)
                        },
                        new
                        {
                            Id = new Guid("ae2bf619-1c63-4261-baff-46c005a68be7"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3304),
                            ScheduleTime = new TimeSpan(0, 18, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3304)
                        },
                        new
                        {
                            Id = new Guid("0a3270cc-39d7-4183-b852-8fa7b270c348"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3310),
                            ScheduleTime = new TimeSpan(0, 19, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3310)
                        },
                        new
                        {
                            Id = new Guid("ec7b2675-c187-4239-a9b3-eeee9ad2aecf"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3312),
                            ScheduleTime = new TimeSpan(0, 20, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3313)
                        },
                        new
                        {
                            Id = new Guid("5b88af9f-3b39-4125-baa4-1d20b0da5bb9"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3315),
                            ScheduleTime = new TimeSpan(0, 21, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3316)
                        },
                        new
                        {
                            Id = new Guid("043b1d4c-bd60-4f71-90a8-9d32758c62e4"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3318),
                            ScheduleTime = new TimeSpan(0, 22, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3318)
                        },
                        new
                        {
                            Id = new Guid("395adf58-6c89-4d61-a739-35fe5c77cadc"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3320),
                            ScheduleTime = new TimeSpan(0, 23, 0, 0, 0),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3321)
                        });
                });

            modelBuilder.Entity("Core.Entities.ScheduleSeat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MovieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeatColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SeatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.Property<int>("SeatStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("MovieId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SeatId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.Seat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CinemaRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SeatColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatRow")
                        .HasColumnType("int");

                    b.Property<int>("SeatStatus")
                        .HasColumnType("int");

                    b.Property<int>("SeatType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CinemaRoomId");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Seats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c46ead65-3429-4423-b1f2-dd7d54bdb64b"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2390),
                            SeatColumn = "A",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2390)
                        },
                        new
                        {
                            Id = new Guid("8080fd9b-ac95-4962-83c9-0e24a63d289a"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2411),
                            SeatColumn = "B",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2411)
                        },
                        new
                        {
                            Id = new Guid("7db0e80e-fe54-4d74-9f8a-7006206d1174"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2427),
                            SeatColumn = "C",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2427)
                        },
                        new
                        {
                            Id = new Guid("175444cd-4975-45b9-80d7-30a8c703697f"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2444),
                            SeatColumn = "D",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2445)
                        },
                        new
                        {
                            Id = new Guid("b278a59c-0cff-426a-abf5-ee431a6c718b"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2460),
                            SeatColumn = "E",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2460)
                        },
                        new
                        {
                            Id = new Guid("70a8d902-eba4-42a2-8ed3-4fc181410ac5"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2479),
                            SeatColumn = "A",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2480)
                        },
                        new
                        {
                            Id = new Guid("017d2b50-2e80-47a6-aaaa-cd28d51820d5"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2495),
                            SeatColumn = "B",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2495)
                        },
                        new
                        {
                            Id = new Guid("47c30741-b08f-499c-8a23-07dd3024cb3d"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2511),
                            SeatColumn = "C",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2511)
                        },
                        new
                        {
                            Id = new Guid("7bfb3ad9-2f57-4804-afec-a9cb9e9abbac"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2528),
                            SeatColumn = "D",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2528)
                        },
                        new
                        {
                            Id = new Guid("082a7f2b-8447-4819-8359-1057cf3bd822"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2544),
                            SeatColumn = "E",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2545)
                        },
                        new
                        {
                            Id = new Guid("79259013-cdac-4c68-b542-8bc26a11b09a"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2560),
                            SeatColumn = "A",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2560)
                        },
                        new
                        {
                            Id = new Guid("b09dc3fb-dc53-4ad0-9684-1a7e6ac4aaf0"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2575),
                            SeatColumn = "B",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2576)
                        },
                        new
                        {
                            Id = new Guid("3a4a63be-d217-45e6-8e57-a0648daa0691"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2591),
                            SeatColumn = "C",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2591)
                        },
                        new
                        {
                            Id = new Guid("60f1d761-0468-4852-9505-009c134a0dfd"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2606),
                            SeatColumn = "D",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2607)
                        },
                        new
                        {
                            Id = new Guid("2dff6e38-e29a-40e1-8b15-d449bf608908"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2661),
                            SeatColumn = "E",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2662)
                        },
                        new
                        {
                            Id = new Guid("27768e1a-4873-4537-bbf7-1652bb1758f5"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2677),
                            SeatColumn = "A",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2677)
                        },
                        new
                        {
                            Id = new Guid("f72d79fc-f319-4cd2-afd1-fbcf94d11c86"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2694),
                            SeatColumn = "B",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2695)
                        },
                        new
                        {
                            Id = new Guid("934a81ad-4a2f-4464-b94a-8ee6cd095248"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2711),
                            SeatColumn = "C",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2711)
                        },
                        new
                        {
                            Id = new Guid("42207f7f-2546-4651-8ac6-a86128d0d9df"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2726),
                            SeatColumn = "D",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2727)
                        },
                        new
                        {
                            Id = new Guid("92a5d01d-4e31-47a8-aa18-752d7d1c1f7e"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2742),
                            SeatColumn = "E",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2743)
                        },
                        new
                        {
                            Id = new Guid("548fef22-2d96-4fac-9700-b54c21808648"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2757),
                            SeatColumn = "A",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2758)
                        },
                        new
                        {
                            Id = new Guid("1d2614a4-1352-43cd-b72d-c33c5fcad214"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2773),
                            SeatColumn = "B",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2773)
                        },
                        new
                        {
                            Id = new Guid("3bf21d7a-b104-4002-8e47-e8ed79d4150f"),
                            CinemaRoomId = new Guid("70e220a4-8297-4361-b9dd-85e1ddf80222"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2789),
                            SeatColumn = "C",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2789)
                        },
                        new
                        {
                            Id = new Guid("9c9fcd13-6bcb-42e3-bd35-afd4e9c89f13"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2805),
                            SeatColumn = "A",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2806)
                        },
                        new
                        {
                            Id = new Guid("c63c813c-18ba-4a06-97e7-1acacf348f7f"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2823),
                            SeatColumn = "B",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2824)
                        },
                        new
                        {
                            Id = new Guid("3cc47cb2-92a8-4bde-850a-30cbee2309f4"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2839),
                            SeatColumn = "C",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2840)
                        },
                        new
                        {
                            Id = new Guid("72b09d14-d3a5-4e0c-84da-2b73b4b86bb3"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2855),
                            SeatColumn = "D",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2855)
                        },
                        new
                        {
                            Id = new Guid("6900b9f4-b460-4367-aa41-ec37ddf86c44"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2870),
                            SeatColumn = "E",
                            SeatRow = 1,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2870)
                        },
                        new
                        {
                            Id = new Guid("4d8f5fe9-8406-400e-a498-480904479823"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2886),
                            SeatColumn = "A",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2886)
                        },
                        new
                        {
                            Id = new Guid("8a939670-32f8-40cc-8c5e-4b6c4d2f8e8b"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2901),
                            SeatColumn = "B",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2902)
                        },
                        new
                        {
                            Id = new Guid("78eabd4c-a63c-4d00-9322-d3d20bd812fd"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2916),
                            SeatColumn = "C",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2917)
                        },
                        new
                        {
                            Id = new Guid("8537172d-3102-4248-a3a0-ac225ead9938"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2961),
                            SeatColumn = "D",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2961)
                        },
                        new
                        {
                            Id = new Guid("951e0275-d577-40fc-be5d-d4ff1df45533"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2978),
                            SeatColumn = "E",
                            SeatRow = 2,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2979)
                        },
                        new
                        {
                            Id = new Guid("1ddc39e9-5f76-42c8-b69b-37b2da02ef19"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2995),
                            SeatColumn = "A",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(2995)
                        },
                        new
                        {
                            Id = new Guid("18de1ef0-5f03-4a6e-b0c9-4839f9e242f7"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3011),
                            SeatColumn = "B",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3011)
                        },
                        new
                        {
                            Id = new Guid("a42179cf-8f08-495f-84fc-715c47c21dad"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3026),
                            SeatColumn = "C",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3026)
                        },
                        new
                        {
                            Id = new Guid("efa729fb-1395-45c3-8c26-272fcef97afc"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3041),
                            SeatColumn = "D",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3042)
                        },
                        new
                        {
                            Id = new Guid("697b862b-050b-4437-81f7-d84e88baf8dc"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3057),
                            SeatColumn = "E",
                            SeatRow = 3,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3058)
                        },
                        new
                        {
                            Id = new Guid("bdec5278-fcf2-42ac-9352-3a2faec1d57f"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3125),
                            SeatColumn = "A",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3126)
                        },
                        new
                        {
                            Id = new Guid("4c1dcaf3-7400-4a7a-be5e-5aa12bfe0092"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3142),
                            SeatColumn = "B",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3142)
                        },
                        new
                        {
                            Id = new Guid("48b3904a-d1e9-492d-ab74-6107ef430134"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3159),
                            SeatColumn = "C",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3160)
                        },
                        new
                        {
                            Id = new Guid("8059664c-a0b3-445e-a33e-d9d64517ce14"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3175),
                            SeatColumn = "D",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3176)
                        },
                        new
                        {
                            Id = new Guid("b0d5e127-62c8-448f-8d00-87dc0da47131"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3191),
                            SeatColumn = "E",
                            SeatRow = 4,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3192)
                        },
                        new
                        {
                            Id = new Guid("c033b7f5-d0a5-41b3-8f95-6fb824b8602c"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3207),
                            SeatColumn = "A",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3208)
                        },
                        new
                        {
                            Id = new Guid("ef2cfb69-b742-4728-b4b4-051aca5af1bd"),
                            CinemaRoomId = new Guid("2eacb0d0-46ce-4aa2-9c87-826844bc05e0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3223),
                            SeatColumn = "B",
                            SeatRow = 5,
                            SeatStatus = 0,
                            SeatType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3223)
                        });
                });

            modelBuilder.Entity("Core.Entities.ShowDate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("DateShow")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("ShowDates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77c656f7-b7a2-4396-ab51-c44ce35805a0"),
                            DateName = "Tomorrow",
                            DateShow = new DateTime(2024, 11, 1, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3380),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3383),
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3384)
                        });
                });

            modelBuilder.Entity("Core.Entities.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TicketType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99f1f44e-59d9-4ce0-ba38-204ef359fcaa"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3504),
                            InvoiceId = new Guid("7ddbf4aa-a6fd-44f6-8337-86444f2f7005"),
                            Price = 75.00m,
                            TicketType = 0,
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3504)
                        });
                });

            modelBuilder.Entity("Core.Entities.TypeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InsertedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InsertedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InsertedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Types");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4a404919-1423-452e-aeb0-4f5753fb8ca6"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3525),
                            Name = "Action",
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3526)
                        },
                        new
                        {
                            Id = new Guid("f2ab13ac-c1d9-4b96-9446-0f13cdcc68a0"),
                            InsertedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3527),
                            Name = "Romantic",
                            UpdatedAt = new DateTime(2024, 10, 31, 14, 20, 41, 248, DateTimeKind.Local).AddTicks(3528)
                        });
                });

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Role");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.CinemaRoom", b =>
                {
                    b.HasOne("Core.Entities.Movie", "CurrentMovie")
                        .WithMany("CinemaRooms")
                        .HasForeignKey("CurrentMovieId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CurrentMovie");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Employee", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Core.Entities.Employee", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Account");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithMany("Invoices")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Account");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Member", b =>
                {
                    b.HasOne("Core.Entities.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Core.Entities.Member", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Account");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Movie", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.MovieSchedule", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Schedule", "Schedule")
                        .WithMany("MovieSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.MovieShowDate", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("MovieShowDates")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ShowDate", "ShowDate")
                        .WithMany("MovieShowDates")
                        .HasForeignKey("ShowDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("ShowDate");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.MovieType", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("MovieTypes")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.TypeEntity", "TypeEntity")
                        .WithMany("MovieTypes")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("TypeEntity");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Promotion", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Schedule", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.ScheduleSeat", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Movie", "Movie")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Schedule", "Schedule")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Seat", "Seat")
                        .WithMany("ScheduleSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Movie");

                    b.Navigation("Schedule");

                    b.Navigation("Seat");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Seat", b =>
                {
                    b.HasOne("Core.Entities.CinemaRoom", "CinemaRoom")
                        .WithMany("Seats")
                        .HasForeignKey("CinemaRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("CinemaRoom");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.ShowDate", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Ticket", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Core.Entities.Invoice", "Invoice")
                        .WithMany("Tickets")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("Invoice");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.TypeEntity", b =>
                {
                    b.HasOne("Core.Entities.Account", "InsertedBy")
                        .WithMany()
                        .HasForeignKey("InsertedById");

                    b.HasOne("Core.Entities.Account", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("InsertedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Core.Entities.CinemaRoom", b =>
                {
                    b.Navigation("Seats");
                });

            modelBuilder.Entity("Core.Entities.Invoice", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Core.Entities.Movie", b =>
                {
                    b.Navigation("CinemaRooms");

                    b.Navigation("MovieSchedules");

                    b.Navigation("MovieShowDates");

                    b.Navigation("MovieTypes");

                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("Core.Entities.Schedule", b =>
                {
                    b.Navigation("MovieSchedules");

                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.Seat", b =>
                {
                    b.Navigation("ScheduleSeats");
                });

            modelBuilder.Entity("Core.Entities.ShowDate", b =>
                {
                    b.Navigation("MovieShowDates");
                });

            modelBuilder.Entity("Core.Entities.TypeEntity", b =>
                {
                    b.Navigation("MovieTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
